@use 'sass:math';
@use 'sass:string';

$scale: (
  000: 0.12,
  100: 0.18,
  200: 0.29,
  300: 0.47,
  400: 0.76,
  500: 1,
  600: 1.38,
  700: 1.62,
  800: 2,
  900: 2.62,
);

@function scale($keys...) {
  $value: $sizes;

  @each $key in $keys {
    $value: map-get($value, $key);
  }

  @return $value;
}

@function em-scale($keys...) {
  $value: $sizes;

  @each $key in $keys {
    $value: map-get($value, $key);
  }

  @return #{$value +'em'};
}

@function rem-scale($keys...) {
  $value: $sizes;

  @each $key in $keys {
    $value: map-get($value, $key);
  }

  @return #{$value +'rem'};
}

@function percent-scale($keys...) {
  $value: $sizes;

  @each $key in $keys {
    $value: map-get($value, $key);
  }

  @return #{$value * 100 +'%'};
}


/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number)=='number' and not unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }

  @return $number;
}

@function px-to-rem($pixels) {
  $value: strip-unit($pixels);
  @return math.div($value, 16)+rem;
}

// legacy
$sizes: (
  000: 0.12,
  100: 0.18,
  200: 0.29,
  300: 0.47,
  400: 0.76,
  500: 1,
  600: 1.38,
  700: 1.62,
  800: 2,
  900: 2.62,
  1000: 4.24,
);

@function size($keys...) {
  @warn 'This function is deprecated';
  $value: $sizes;

  @each $key in $keys {
    $value: map-get($value, $key);
  }

  @return #{$value +'em'};
}

$fibonacci: (
  step0: 1,
  step1: 2,
  step2: 3,
  step3: 5,
  step4: 8,
  step5: 13,
  step6: 21,
  step7: 34,
  step8: 55,
  step9: 89,
  step10: 144,
);

@function fibonacci($keys...) {
  $value: $fibonacci;

  @each $key in $keys {
    $value: map-get($value, $key);
  }

  @return $value;
}